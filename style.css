* {
  outline: 0;
  padding: 0;
  margin: 0;
}

html {
  width: 100%;
  height: 100%;
}

body {
  width: 100%;
  height: 100%;

  /* typo5에서는 검은색 배경으로 할거임 */
  background-color: #000000;
}

/* 
2d canvas에 렌더해야 하는 경우 
CSS style sheet에서 캔버스의 CSS 크기도 따로 지정해줘야 함.
PIXI.Renderer로 생성한 WebGL view 에서는 autoDensity라는 
option값으로 canvas의 resolution이 1보다 커질 때 CSS pixel도 그에 맞춰서 재조정하지만,
일반 2d 캔버스에서는 canvas resolution이 늘어나면 
CSS 크기를 브라우저의 100%로 따로 맞추어줘야 함.
*/
canvas {
  width: 100%;
  height: 100%;
}

ul {
  /* position: absolute와 relative 비교 정리 */
  /* relative는 요소를 일반적인 문서 흐름에 따라 배치하되, 위치를 변경할 때는 해당 요소가 일반적인 문서 흐름 상 원래 있어야할 곳을 기준으로 오프셋을 적용함. */
  /* absolute는 요소를 일반적인 문서 흐름에서 제거함. 또한 위치를 변경할 때는 해당 요소 바로 위의 부모 요소를 기준으로 오프셋을 적용함. */
  position: absolute;
  left: 50%;
  bottom: 0;
  display: flex;


  /* 바깥쪽에서 50%만큼 오프셋을 주고, transform: translate()안에서 반대 방향으로 -50%만큼 오프셋을 주면 브라우저 가운데에 배치됨! */
  transform: translate(-50%, 0);
}

ul li {
  display: inline-block;
  width: 60px;
  height: 60px;
  margin: 0 10px;
  cursor: pointer;

  /* box-sizing: border-box;으로 했다는 뜻의 의미는 */
  /* width, height에 설정한 값이 박스 모델 상에서 content, padding, border의 너비와 폭을 모두 포함해서 지정해준다는 뜻. */
  /* 예를 들어, width를 60px로 하고, padding을 5px, border를 2px로 했다고 치면, 실제 content의 width는 46px이 되겠지 */
  box-sizing: border-box;
}

/* selected라는 class가 붙은 li 태그에만 적용하겠다는 뜻 */
ul li.selected {
  border: 4px solid #ffffff;
}

ul li img {
  /* li의 width, height인 60px의 100%로 사이즈를 지정해주면 img태그들도 원본 사이즈에서 60 * 60px 로 줄어들게 됨. */
  width: 100%;
  height: 100%;
}